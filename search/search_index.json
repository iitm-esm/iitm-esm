{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u00b6 Getting the Source Code and scripts \u00b6 git clone --recursive https://github.com/iitm-esm/iitm-esm.git Model Compilation \u00b6 ./compile.sh Setting up an Experiment \u00b6 Running the model and post-processing \u00b6 Reporting Bugs \u00b6","title":"Home"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#getting-the-source-code-and-scripts","text":"git clone --recursive https://github.com/iitm-esm/iitm-esm.git","title":"Getting the Source Code and scripts"},{"location":"#model-compilation","text":"./compile.sh","title":"Model Compilation"},{"location":"#setting-up-an-experiment","text":"","title":"Setting up an Experiment"},{"location":"#running-the-model-and-post-processing","text":"","title":"Running the model and post-processing"},{"location":"#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"About_us/","text":"IITM-ESM \u00b6 The IITM Earth System Model (IITM-ESM), developed recently at CCCR, IITM, is an outcome of incorporating earth system components in the Climate Forecast System (CFS) coupled model from National Center for Environmental Prediction (NCEP, USA), and thereby transforming the CFS seasonal prediction model to a long-term climate model. The first version of IITM ESM (ESM1.0) showed significant improvements in the simulation of sea surface temperature and captures dominant modes of climate variabilities and their links with the Indian summer monsoon. In a recent version (IITM- ESM2.0), further improvements are incorporated in order to obtain a radiatively-balanced global climate modeling framework, which is required for predicting long-term climate change. Additionally, radiative effects of natural and anthropogenic aerosols are incorporated by specifying time-varying 3-dimensional fields of aerosol optical properties. The IITM- ESM2.0 also shows improvements in simulating sea ice distribution, ocean biogeochemistry and mean precipitation over Asian monsoon region. The IITM-ESM will be the first climate model from India that will be participating in the Coupled Modeling Intercomparison Project- Phase 6 (CMIP6) experiments required for the Intergovernmental Panel on Climate Change (IPCC) 6 th Assessment Report. Meet the Members \u00b6 Support \u00b6","title":"About"},{"location":"About_us/#iitm-esm","text":"The IITM Earth System Model (IITM-ESM), developed recently at CCCR, IITM, is an outcome of incorporating earth system components in the Climate Forecast System (CFS) coupled model from National Center for Environmental Prediction (NCEP, USA), and thereby transforming the CFS seasonal prediction model to a long-term climate model. The first version of IITM ESM (ESM1.0) showed significant improvements in the simulation of sea surface temperature and captures dominant modes of climate variabilities and their links with the Indian summer monsoon. In a recent version (IITM- ESM2.0), further improvements are incorporated in order to obtain a radiatively-balanced global climate modeling framework, which is required for predicting long-term climate change. Additionally, radiative effects of natural and anthropogenic aerosols are incorporated by specifying time-varying 3-dimensional fields of aerosol optical properties. The IITM- ESM2.0 also shows improvements in simulating sea ice distribution, ocean biogeochemistry and mean precipitation over Asian monsoon region. The IITM-ESM will be the first climate model from India that will be participating in the Coupled Modeling Intercomparison Project- Phase 6 (CMIP6) experiments required for the Intergovernmental Panel on Climate Change (IPCC) 6 th Assessment Report.","title":"IITM-ESM"},{"location":"About_us/#meet-the-members","text":"","title":"Meet the Members"},{"location":"About_us/#support","text":"","title":"Support"},{"location":"FAQs/","text":"Frequently Asked Questions \u00b6","title":"FAQ"},{"location":"FAQs/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"dev_guide/","text":"Developers Guide \u00b6 Git-Development workflow for IITM-ESM \u00b6 The Central Repository of IITM-ESM on github is https://github.com/iitm-esm/iitm-esm.git and main branch represents the official project history. Instead of committing directly on their local main branch, developers create a new branch every time they start work on a new feature. Feature branches can (and should) be pushed to the central repository. This makes it possible to share a feature with other developers without touching any official code. The following is a walk-through of the life-cycle of a feature branch. All feature branches are created off the latest code state of a project. If already cloned once and want to start working on a new feature in the same directory: git checkout main git fetch origin git reset --hard origin/main Description: This switches the repo to the main branch, pulls the latest commits and resets the repo's local copy of main to match the latest version. However, if starting afresh in a new directory, clone the main repository in your local machine or HPC: git clone --recursive git@github.com:iitm-esm/iitm-esm.git Use a separate branch for each feature or issue you work on. A branch should be created and checked out locally (so that any changes you make will be on that branch). This can be done using: git checkout -b new-feature Description: This checks out a branch called new-feature based on main, and the -b flag tells Git to create the branch if it doesn\u2019t already exist. Note : Feature branches should follow the format: alias/new-feature. Lets say, Aditi wants to work on a new feature which is related to land ice coupling. She would give the following command to the terminal: git checkout -b aditi/land_ice_coupling Feature branches should have descriptive names, like land_ice_coupling or issue-#1061. The idea is to give a clear, highly-focused purpose to each branch. On this branch, edit, stage, and commit changes in the usual fashion, building up the feature with as many commits as necessary. git status git add <some-file> git commit The developer can then push the commits to the central repository. This serves as a convenient backup when collaborating with other developers. git push -u origin new-feature Description: This command pushes new-feature to the central repository on github, and the -u flag adds it as a remote-tracking branch. After setting up the tracking branch. Once a feature is complete and tested thoroughly, you don\u2019t immediately merge it into main. Instead, you push the feature branch to the central repository and file a pull request asking to merge your additions into main. The other developers (gatekeepers) then review the changes before they become a part of the main codebase. You can think of pull requests as a discussion dedicated to a particular branch. This pull request can be placed from github.com/iitm-esm/iitm-esm.git. Note: The above specifications follow a git feature branch workflow. For a general understanding of the idea, refer to git feature workflow .","title":"Developers Guide"},{"location":"dev_guide/#developers-guide","text":"","title":"Developers Guide"},{"location":"dev_guide/#git-development-workflow-for-iitm-esm","text":"The Central Repository of IITM-ESM on github is https://github.com/iitm-esm/iitm-esm.git and main branch represents the official project history. Instead of committing directly on their local main branch, developers create a new branch every time they start work on a new feature. Feature branches can (and should) be pushed to the central repository. This makes it possible to share a feature with other developers without touching any official code. The following is a walk-through of the life-cycle of a feature branch. All feature branches are created off the latest code state of a project. If already cloned once and want to start working on a new feature in the same directory: git checkout main git fetch origin git reset --hard origin/main Description: This switches the repo to the main branch, pulls the latest commits and resets the repo's local copy of main to match the latest version. However, if starting afresh in a new directory, clone the main repository in your local machine or HPC: git clone --recursive git@github.com:iitm-esm/iitm-esm.git Use a separate branch for each feature or issue you work on. A branch should be created and checked out locally (so that any changes you make will be on that branch). This can be done using: git checkout -b new-feature Description: This checks out a branch called new-feature based on main, and the -b flag tells Git to create the branch if it doesn\u2019t already exist. Note : Feature branches should follow the format: alias/new-feature. Lets say, Aditi wants to work on a new feature which is related to land ice coupling. She would give the following command to the terminal: git checkout -b aditi/land_ice_coupling Feature branches should have descriptive names, like land_ice_coupling or issue-#1061. The idea is to give a clear, highly-focused purpose to each branch. On this branch, edit, stage, and commit changes in the usual fashion, building up the feature with as many commits as necessary. git status git add <some-file> git commit The developer can then push the commits to the central repository. This serves as a convenient backup when collaborating with other developers. git push -u origin new-feature Description: This command pushes new-feature to the central repository on github, and the -u flag adds it as a remote-tracking branch. After setting up the tracking branch. Once a feature is complete and tested thoroughly, you don\u2019t immediately merge it into main. Instead, you push the feature branch to the central repository and file a pull request asking to merge your additions into main. The other developers (gatekeepers) then review the changes before they become a part of the main codebase. You can think of pull requests as a discussion dedicated to a particular branch. This pull request can be placed from github.com/iitm-esm/iitm-esm.git. Note: The above specifications follow a git feature branch workflow. For a general understanding of the idea, refer to git feature workflow .","title":"Git-Development workflow for IITM-ESM"},{"location":"dev_guide/doc_guide/","text":"Model documentation \u00b6 How to Contribute \u00b6 This documention is a collection of files written in Markdown . Why Markdown? \u00b6 The idea for Markdown is to make it easy to read, write, and edit prose . HTML is a publishing format; Markdown is a writing format. \u2013John Gruber Note: I just highlighted this quote simply using \">\" syntax. Markdown Syntax \u00b6 Listed below are the most frequently used markdown syntax you might encounter while writing this documentation: Adding Links and URLs \u00b6 Links \u00b6 To create a link, enclose the link text in brackets (e.g., [IITM Earth System Model]) and then follow it immediately with the URL in parentheses (e.g., (http://cccr.tropmet.res.in/home/clim_esm_one.jsp)) Example: The [IITM Earth System Model](http://cccr.tropmet.res.in/home/clim_esm_one.jsp) is the first model from India to participate in IPCC assessment reports. Ouput: The IITM Earth System Model is the first model from India to participate in IPCC assessment reports. URL \u00b6 Example: <https://github.com/iitm-esm/iitm-esm/> Output: https://github.com/iitm-esm/iitm-esm/ Adding a code snippet (or command) \u00b6 `code` Example: git clone https://github.com/iitm-esm/iitm-esm.git Cross-referencing \u00b6 Lets say a user wants to link the User guide in the current text. This can be done using [text](path) Example: Link to user guide Adding list \u00b6 List can be ordered and unordered. Below is an example of an ordered list. User Guide Technical Guide Atmospheric Component Ocean Component An unordered list can be styled using dashes (-), asterisks (*), or plus signs (+). And Indent one or more items to create a nested list. User Guide Technical Guide Atmospheric Component Ocean Component Adding Images \u00b6 Images are prefaced with an exclamation point ( ! ). ![Alt text](Image path) Note: The alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader). For example, I wish to add a schematic of the IITM Earth System Model. I would write this in markdown: ![iitm esm diagram](../img/esm-diagram.png) Oops! Adding a caption to Markdown isn't easy. So What do we do now? For any markup that is not covered by Markdown\u2019s syntax, you simply use HTML itself. \u2013John Gruber Using the figure and figcaption HTML tags, a caption can be added to the above image as shown in the example below. <figure> <img src=\"../../img/esm-diagram.png\" alt=\"ITM esm diagram\"> <figcaption>IITM Earth System Model</figcaption> </figure> IITM Earth System Model However, If your Markdown application doesn\u2019t support HTML, you could try placing the caption directly below the image and using emphasis. ![iitm esm diagram](../img/esm-diagram.png) *IITM Earth System Model* IITM Earth System Model Adding a Table \u00b6 Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks. In the example below, the git commands are mentioned in method column and the functionality is described in the second column. | Method | Description | | ----------- | ------------------------------------ | | `CHECKOUT` | To swap between branches | | `COMMIT` | To commit the new version | | `PULL` | To pull the updates from github repo | Method Description CHECKOUT To swap between branches COMMIT To commit the new version PULL To pull the updates from github repo Adding symbols \u00b6 Markdown doesn\u2019t provide special syntax for symbols. There are two ways to add symbols in your markdown file. Option 1 \u00b6 Simply copy and paste the symbol you want in your markdown. It works in most of the cases. For example, I want to add the symbol pi in this document. So, I will search symbol for pi on the web and copy and paste it here. \u03c0 Option 2 \u00b6 A more elegant way is to use HTML entity for the symbol you want to use. For example, if you want to display the copyright sign (\u00a9), you can copy and paste the HTML entity for copyright (\u00a9) into your Markdown document. <p>I am displaying &copy</p> The output: I am displaying \u00a9 Adding Footnote References \u00b6 The current theme of MkDocs has an extension \"footnotes\" which provides the functionality to easily define inline footnotes. A footnote reference is enclosed in square brackets and must start with a caret ^, directly followed by an arbitrary identifier. The IITM-ESM[^1] will be the first climate model from India that will be participating in the Coupled Modeling Intercomparison Project- Phase 6[^2] (CMIP6) experiments required for the Intergovernmental Panel on Climate Change[^3] (IPCC) 6th Assessment Report. The IITM-ESM 1 will be the first climate model from India that will be participating in the Coupled Modeling Intercomparison Project- Phase 6 2 (CMIP6) experiments required for the Intergovernmental Panel on Climate Change (IPCC) 6 th Assessment Report. Adding Equations \u00b6 MkDocs has a beautiful functionality \"MathJax\" to display mathematical content in the browser. For inline formulas, enclose the formula in \\(\u2026\\) . For displayed formulas, use \\( \\(\u2026\\) \\) . A sample equation: $$ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} $$ Output: \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] Adding Diagrams \u00b6 Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Mermaid.js is the functionality which helps to add elegant diagrams to your markdown. Diagrams can be in the form of flowcharts, sequence diagrams, pie charts, gantt charts, etc. Flowcharts are diagrams that represent workflows or processes. An example of Flowchart: Lets say, the user wishes to explain the directory structure of IITM ESM Technical Guide with the help of a flowchart. My code would look like: ```mermaid graph LR A[IITM ESM Technical Guide] --> B(Atmospheric Component) A --> C(Ocean Component) A --> D(Land Component) A --> E(Sea Ice Component) B --> F(Technical and Computational Procedures) B --> G(Dynamics and Numerical Procedures) B --> H(Physical processes and parameterizations) C --> I(Technical and Computational Procedures) C --> J(Dynamics and Numerical Procedures) C --> K(Physical processes and parameterizations) D --> L(Technical and Computational Procedures) D --> M(Dynamics and Numerical Procedures) D --> N(Physical processes and parameterizations) E --> O(Technical and Computational Procedures) E --> P(Dynamics and Numerical Procedures) E --> Q(Physical processes and parameterizations) ``` The Output: graph LR A[IITM ESM Technical Guide] --> B(Atmospheric Component) A --> C(Ocean Component) A --> D(Land Component) A --> E(Sea Ice Component) B --> F(Technical and Computational Procedures) B --> G(Dynamics and Numerical Procedures) B --> H(Physical processes and parameterizations) C --> I(Technical and Computational Procedures) C --> J(Dynamics and Numerical Procedures) C --> K(Physical processes and parameterizations) D --> L(Technical and Computational Procedures) D --> M(Dynamics and Numerical Procedures) D --> N(Physical processes and parameterizations) E --> O(Technical and Computational Procedures) E --> P(Dynamics and Numerical Procedures) E --> Q(Physical processes and parameterizations) Note : for a horizontal Top to botton Graph representation, use \"graph TD\" in code. More graph representations can be found here Adding lineBreaks \u00b6 You can use two or more spaces (commonly referred to as \u201ctrailing whitespace\u201d) for line breaks in markdown. However, it\u2019s hard to see trailing whitespace in an editor, and many people accidentally or intentionally put two spaces after every sentence. For this reason, you may want to use something other than trailing whitespace for line breaks. Hence, you can use the HTML tag for adding a linebreak to your text. For example: <p>This is the first line.<br> And this is the second line.</p> The Output: This is the first line. And this is the second line. Adding Emphasis to your text \u00b6 Bold \u00b6 To bold text, add two asterisks or underscores before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters. Example code: The **IITM Earth System Model** (IITM-ESM), developed recently at **CCCR, IITM** Output: The IITM Earth System Model (IITM-ESM), developed recently at CCCR, IITM Italics \u00b6 To italicize text, add one asterisk or underscore before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters. Example code: The *IITM Earth System Model* (IITM-ESM)*, developed recently at *CCCR, IITM* Output: The IITM Earth System Model (IITM-ESM), developed recently at CCCR, IITM Adding Comments \u00b6 To add a comment, place text inside brackets followed by a colon, a space, and a pound sign (e.g., [comment]: #). You should put blank lines before and after a comment. For example: Here's a paragraph that will be visible. [This is a comment that will be hidden.]: # And here's another paragraph that's visible. The Output: Here's a paragraph that will be visible. And here's another paragraph that's visible. Documentation directory structure \u00b6 IITM-ESM documentation follows a standard documentation approach. The documentation consists of three main guides: 1. User Guide 2. Technical Documentation 3. Developers Guide and is depicted in the flowchart below: graph TD Title[docs] --> A(src) A --> B(user_guide) A --> C(tech_docs) A --> D(dev_guide) References \u00b6 https://www.markdownguide.org/hacks/#image-captions https://squidfunk.github.io/mkdocs-material/ Krishnan R, Swapna P, Choudhury AD, Narayansetti S, Prajeesh AG, Singh M, Modi A, Mathew R, Vellore R, Jyoti J, Sabin TP. The IITM Earth System Model (IITM ESM). arXiv preprint arXiv:2101.03410. 2021 Jan 9. \u21a9 Eyring, V., Bony, S., Meehl, G. A., Senior, C. A., Stevens, B., Stouffer, R. J., and Taylor, K. E.: Overview of the Coupled Model Intercomparison Project Phase 6 (CMIP6) experimental design and organization, Geosci. Model Dev., 9, 1937-1958, doi:10.5194/gmd-9-1937-2016, 2016. \u21a9","title":"Model documentation"},{"location":"dev_guide/doc_guide/#model-documentation","text":"","title":"Model documentation"},{"location":"dev_guide/doc_guide/#how-to-contribute","text":"This documention is a collection of files written in Markdown .","title":"How to Contribute"},{"location":"dev_guide/doc_guide/#why-markdown","text":"The idea for Markdown is to make it easy to read, write, and edit prose . HTML is a publishing format; Markdown is a writing format. \u2013John Gruber Note: I just highlighted this quote simply using \">\" syntax.","title":"Why Markdown?"},{"location":"dev_guide/doc_guide/#markdown-syntax","text":"Listed below are the most frequently used markdown syntax you might encounter while writing this documentation:","title":"Markdown Syntax"},{"location":"dev_guide/doc_guide/#adding-links-and-urls","text":"","title":"Adding Links and URLs"},{"location":"dev_guide/doc_guide/#links","text":"To create a link, enclose the link text in brackets (e.g., [IITM Earth System Model]) and then follow it immediately with the URL in parentheses (e.g., (http://cccr.tropmet.res.in/home/clim_esm_one.jsp)) Example: The [IITM Earth System Model](http://cccr.tropmet.res.in/home/clim_esm_one.jsp) is the first model from India to participate in IPCC assessment reports. Ouput: The IITM Earth System Model is the first model from India to participate in IPCC assessment reports.","title":"Links"},{"location":"dev_guide/doc_guide/#url","text":"Example: <https://github.com/iitm-esm/iitm-esm/> Output: https://github.com/iitm-esm/iitm-esm/","title":"URL"},{"location":"dev_guide/doc_guide/#adding-a-code-snippet-or-command","text":"`code` Example: git clone https://github.com/iitm-esm/iitm-esm.git","title":"Adding a code snippet (or command)"},{"location":"dev_guide/doc_guide/#cross-referencing","text":"Lets say a user wants to link the User guide in the current text. This can be done using [text](path) Example: Link to user guide","title":"Cross-referencing"},{"location":"dev_guide/doc_guide/#adding-list","text":"List can be ordered and unordered. Below is an example of an ordered list. User Guide Technical Guide Atmospheric Component Ocean Component An unordered list can be styled using dashes (-), asterisks (*), or plus signs (+). And Indent one or more items to create a nested list. User Guide Technical Guide Atmospheric Component Ocean Component","title":"Adding list"},{"location":"dev_guide/doc_guide/#adding-images","text":"Images are prefaced with an exclamation point ( ! ). ![Alt text](Image path) Note: The alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader). For example, I wish to add a schematic of the IITM Earth System Model. I would write this in markdown: ![iitm esm diagram](../img/esm-diagram.png) Oops! Adding a caption to Markdown isn't easy. So What do we do now? For any markup that is not covered by Markdown\u2019s syntax, you simply use HTML itself. \u2013John Gruber Using the figure and figcaption HTML tags, a caption can be added to the above image as shown in the example below. <figure> <img src=\"../../img/esm-diagram.png\" alt=\"ITM esm diagram\"> <figcaption>IITM Earth System Model</figcaption> </figure> IITM Earth System Model However, If your Markdown application doesn\u2019t support HTML, you could try placing the caption directly below the image and using emphasis. ![iitm esm diagram](../img/esm-diagram.png) *IITM Earth System Model* IITM Earth System Model","title":"Adding Images"},{"location":"dev_guide/doc_guide/#adding-a-table","text":"Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks. In the example below, the git commands are mentioned in method column and the functionality is described in the second column. | Method | Description | | ----------- | ------------------------------------ | | `CHECKOUT` | To swap between branches | | `COMMIT` | To commit the new version | | `PULL` | To pull the updates from github repo | Method Description CHECKOUT To swap between branches COMMIT To commit the new version PULL To pull the updates from github repo","title":"Adding a Table"},{"location":"dev_guide/doc_guide/#adding-symbols","text":"Markdown doesn\u2019t provide special syntax for symbols. There are two ways to add symbols in your markdown file.","title":"Adding symbols"},{"location":"dev_guide/doc_guide/#option-1","text":"Simply copy and paste the symbol you want in your markdown. It works in most of the cases. For example, I want to add the symbol pi in this document. So, I will search symbol for pi on the web and copy and paste it here. \u03c0","title":"Option 1"},{"location":"dev_guide/doc_guide/#option-2","text":"A more elegant way is to use HTML entity for the symbol you want to use. For example, if you want to display the copyright sign (\u00a9), you can copy and paste the HTML entity for copyright (\u00a9) into your Markdown document. <p>I am displaying &copy</p> The output: I am displaying \u00a9","title":"Option 2"},{"location":"dev_guide/doc_guide/#adding-footnote-references","text":"The current theme of MkDocs has an extension \"footnotes\" which provides the functionality to easily define inline footnotes. A footnote reference is enclosed in square brackets and must start with a caret ^, directly followed by an arbitrary identifier. The IITM-ESM[^1] will be the first climate model from India that will be participating in the Coupled Modeling Intercomparison Project- Phase 6[^2] (CMIP6) experiments required for the Intergovernmental Panel on Climate Change[^3] (IPCC) 6th Assessment Report. The IITM-ESM 1 will be the first climate model from India that will be participating in the Coupled Modeling Intercomparison Project- Phase 6 2 (CMIP6) experiments required for the Intergovernmental Panel on Climate Change (IPCC) 6 th Assessment Report.","title":"Adding Footnote References"},{"location":"dev_guide/doc_guide/#adding-equations","text":"MkDocs has a beautiful functionality \"MathJax\" to display mathematical content in the browser. For inline formulas, enclose the formula in \\(\u2026\\) . For displayed formulas, use \\( \\(\u2026\\) \\) . A sample equation: $$ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} $$ Output: \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","title":"Adding Equations"},{"location":"dev_guide/doc_guide/#adding-diagrams","text":"Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Mermaid.js is the functionality which helps to add elegant diagrams to your markdown. Diagrams can be in the form of flowcharts, sequence diagrams, pie charts, gantt charts, etc. Flowcharts are diagrams that represent workflows or processes. An example of Flowchart: Lets say, the user wishes to explain the directory structure of IITM ESM Technical Guide with the help of a flowchart. My code would look like: ```mermaid graph LR A[IITM ESM Technical Guide] --> B(Atmospheric Component) A --> C(Ocean Component) A --> D(Land Component) A --> E(Sea Ice Component) B --> F(Technical and Computational Procedures) B --> G(Dynamics and Numerical Procedures) B --> H(Physical processes and parameterizations) C --> I(Technical and Computational Procedures) C --> J(Dynamics and Numerical Procedures) C --> K(Physical processes and parameterizations) D --> L(Technical and Computational Procedures) D --> M(Dynamics and Numerical Procedures) D --> N(Physical processes and parameterizations) E --> O(Technical and Computational Procedures) E --> P(Dynamics and Numerical Procedures) E --> Q(Physical processes and parameterizations) ``` The Output: graph LR A[IITM ESM Technical Guide] --> B(Atmospheric Component) A --> C(Ocean Component) A --> D(Land Component) A --> E(Sea Ice Component) B --> F(Technical and Computational Procedures) B --> G(Dynamics and Numerical Procedures) B --> H(Physical processes and parameterizations) C --> I(Technical and Computational Procedures) C --> J(Dynamics and Numerical Procedures) C --> K(Physical processes and parameterizations) D --> L(Technical and Computational Procedures) D --> M(Dynamics and Numerical Procedures) D --> N(Physical processes and parameterizations) E --> O(Technical and Computational Procedures) E --> P(Dynamics and Numerical Procedures) E --> Q(Physical processes and parameterizations) Note : for a horizontal Top to botton Graph representation, use \"graph TD\" in code. More graph representations can be found here","title":"Adding Diagrams"},{"location":"dev_guide/doc_guide/#adding-linebreaks","text":"You can use two or more spaces (commonly referred to as \u201ctrailing whitespace\u201d) for line breaks in markdown. However, it\u2019s hard to see trailing whitespace in an editor, and many people accidentally or intentionally put two spaces after every sentence. For this reason, you may want to use something other than trailing whitespace for line breaks. Hence, you can use the HTML tag for adding a linebreak to your text. For example: <p>This is the first line.<br> And this is the second line.</p> The Output: This is the first line. And this is the second line.","title":"Adding lineBreaks"},{"location":"dev_guide/doc_guide/#adding-emphasis-to-your-text","text":"","title":"Adding Emphasis to your text"},{"location":"dev_guide/doc_guide/#bold","text":"To bold text, add two asterisks or underscores before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters. Example code: The **IITM Earth System Model** (IITM-ESM), developed recently at **CCCR, IITM** Output: The IITM Earth System Model (IITM-ESM), developed recently at CCCR, IITM","title":"Bold"},{"location":"dev_guide/doc_guide/#italics","text":"To italicize text, add one asterisk or underscore before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters. Example code: The *IITM Earth System Model* (IITM-ESM)*, developed recently at *CCCR, IITM* Output: The IITM Earth System Model (IITM-ESM), developed recently at CCCR, IITM","title":"Italics"},{"location":"dev_guide/doc_guide/#adding-comments","text":"To add a comment, place text inside brackets followed by a colon, a space, and a pound sign (e.g., [comment]: #). You should put blank lines before and after a comment. For example: Here's a paragraph that will be visible. [This is a comment that will be hidden.]: # And here's another paragraph that's visible. The Output: Here's a paragraph that will be visible. And here's another paragraph that's visible.","title":"Adding Comments"},{"location":"dev_guide/doc_guide/#documentation-directory-structure","text":"IITM-ESM documentation follows a standard documentation approach. The documentation consists of three main guides: 1. User Guide 2. Technical Documentation 3. Developers Guide and is depicted in the flowchart below: graph TD Title[docs] --> A(src) A --> B(user_guide) A --> C(tech_docs) A --> D(dev_guide)","title":"Documentation directory structure"},{"location":"dev_guide/doc_guide/#references","text":"https://www.markdownguide.org/hacks/#image-captions https://squidfunk.github.io/mkdocs-material/ Krishnan R, Swapna P, Choudhury AD, Narayansetti S, Prajeesh AG, Singh M, Modi A, Mathew R, Vellore R, Jyoti J, Sabin TP. The IITM Earth System Model (IITM ESM). arXiv preprint arXiv:2101.03410. 2021 Jan 9. \u21a9 Eyring, V., Bony, S., Meehl, G. A., Senior, C. A., Stevens, B., Stouffer, R. J., and Taylor, K. E.: Overview of the Coupled Model Intercomparison Project Phase 6 (CMIP6) experimental design and organization, Geosci. Model Dev., 9, 1937-1958, doi:10.5194/gmd-9-1937-2016, 2016. \u21a9","title":"References"},{"location":"dev_guide/partial/git_workflow/","text":"Git-Development workflow for IITM-ESM \u00b6 The Central Repository of IITM-ESM on github is https://github.com/iitm-esm/iitm-esm.git and main branch represents the official project history. Instead of committing directly on their local main branch, developers create a new branch every time they start work on a new feature. Feature branches can (and should) be pushed to the central repository. This makes it possible to share a feature with other developers without touching any official code. The following is a walk-through of the life-cycle of a feature branch. All feature branches are created off the latest code state of a project. If already cloned once and want to start working on a new feature in the same directory: git checkout main git fetch origin git reset --hard origin/main Description: This switches the repo to the main branch, pulls the latest commits and resets the repo's local copy of main to match the latest version. However, if starting afresh in a new directory, clone the main repository in your local machine or HPC: git clone --recursive git@github.com:iitm-esm/iitm-esm.git Use a separate branch for each feature or issue you work on. A branch should be created and checked out locally (so that any changes you make will be on that branch). This can be done using: git checkout -b new-feature Description: This checks out a branch called new-feature based on main, and the -b flag tells Git to create the branch if it doesn\u2019t already exist. Note : Feature branches should follow the format: alias/new-feature. Lets say, Aditi wants to work on a new feature which is related to land ice coupling. She would give the following command to the terminal: git checkout -b aditi/land_ice_coupling Feature branches should have descriptive names, like land_ice_coupling or issue-#1061. The idea is to give a clear, highly-focused purpose to each branch. On this branch, edit, stage, and commit changes in the usual fashion, building up the feature with as many commits as necessary. git status git add <some-file> git commit The developer can then push the commits to the central repository. This serves as a convenient backup when collaborating with other developers. git push -u origin new-feature Description: This command pushes new-feature to the central repository on github, and the -u flag adds it as a remote-tracking branch. After setting up the tracking branch. Once a feature is complete and tested thoroughly, you don\u2019t immediately merge it into main. Instead, you push the feature branch to the central repository and file a pull request asking to merge your additions into main. The other developers (gatekeepers) then review the changes before they become a part of the main codebase. You can think of pull requests as a discussion dedicated to a particular branch. This pull request can be placed from github.com/iitm-esm/iitm-esm.git. Note: The above specifications follow a git feature branch workflow. For a general understanding of the idea, refer to git feature workflow .","title":"Git workflow"},{"location":"dev_guide/partial/git_workflow/#git-development-workflow-for-iitm-esm","text":"The Central Repository of IITM-ESM on github is https://github.com/iitm-esm/iitm-esm.git and main branch represents the official project history. Instead of committing directly on their local main branch, developers create a new branch every time they start work on a new feature. Feature branches can (and should) be pushed to the central repository. This makes it possible to share a feature with other developers without touching any official code. The following is a walk-through of the life-cycle of a feature branch. All feature branches are created off the latest code state of a project. If already cloned once and want to start working on a new feature in the same directory: git checkout main git fetch origin git reset --hard origin/main Description: This switches the repo to the main branch, pulls the latest commits and resets the repo's local copy of main to match the latest version. However, if starting afresh in a new directory, clone the main repository in your local machine or HPC: git clone --recursive git@github.com:iitm-esm/iitm-esm.git Use a separate branch for each feature or issue you work on. A branch should be created and checked out locally (so that any changes you make will be on that branch). This can be done using: git checkout -b new-feature Description: This checks out a branch called new-feature based on main, and the -b flag tells Git to create the branch if it doesn\u2019t already exist. Note : Feature branches should follow the format: alias/new-feature. Lets say, Aditi wants to work on a new feature which is related to land ice coupling. She would give the following command to the terminal: git checkout -b aditi/land_ice_coupling Feature branches should have descriptive names, like land_ice_coupling or issue-#1061. The idea is to give a clear, highly-focused purpose to each branch. On this branch, edit, stage, and commit changes in the usual fashion, building up the feature with as many commits as necessary. git status git add <some-file> git commit The developer can then push the commits to the central repository. This serves as a convenient backup when collaborating with other developers. git push -u origin new-feature Description: This command pushes new-feature to the central repository on github, and the -u flag adds it as a remote-tracking branch. After setting up the tracking branch. Once a feature is complete and tested thoroughly, you don\u2019t immediately merge it into main. Instead, you push the feature branch to the central repository and file a pull request asking to merge your additions into main. The other developers (gatekeepers) then review the changes before they become a part of the main codebase. You can think of pull requests as a discussion dedicated to a particular branch. This pull request can be placed from github.com/iitm-esm/iitm-esm.git. Note: The above specifications follow a git feature branch workflow. For a general understanding of the idea, refer to git feature workflow .","title":"Git-Development workflow for IITM-ESM"},{"location":"partial/getting_started/","text":"Getting Started \u00b6 Getting the Source Code and scripts \u00b6 git clone --recursive https://github.com/iitm-esm/iitm-esm.git Model Compilation \u00b6 ./compile.sh Setting up an Experiment \u00b6 Running the model and post-processing \u00b6 Reporting Bugs \u00b6","title":"Getting Started"},{"location":"partial/getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"partial/getting_started/#getting-the-source-code-and-scripts","text":"git clone --recursive https://github.com/iitm-esm/iitm-esm.git","title":"Getting the Source Code and scripts"},{"location":"partial/getting_started/#model-compilation","text":"./compile.sh","title":"Model Compilation"},{"location":"partial/getting_started/#setting-up-an-experiment","text":"","title":"Setting up an Experiment"},{"location":"partial/getting_started/#running-the-model-and-post-processing","text":"","title":"Running the model and post-processing"},{"location":"partial/getting_started/#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"partial/installation/","text":"Compile \u00b6 ./compile.sh","title":"Installation"},{"location":"partial/installation/#compile","text":"./compile.sh","title":"Compile"},{"location":"tech_docs/","text":"Technical Documentation \u00b6 This Guide outlines the all the technical details of the model. Technical and Computational Procedures \u00b6 Dynamics and Numerical Procedures \u00b6 Physical processes and parameterizations \u00b6","title":"Technical Documentation"},{"location":"tech_docs/#technical-documentation","text":"This Guide outlines the all the technical details of the model.","title":"Technical Documentation"},{"location":"tech_docs/#technical-and-computational-procedures","text":"","title":"Technical and Computational Procedures"},{"location":"tech_docs/#dynamics-and-numerical-procedures","text":"","title":"Dynamics and Numerical Procedures"},{"location":"tech_docs/#physical-processes-and-parameterizations","text":"","title":"Physical processes and parameterizations"},{"location":"tech_docs/Atm/","text":"Atmospheric Component \u00b6","title":"Atmospheric Component"},{"location":"tech_docs/Atm/#atmospheric-component","text":"","title":"Atmospheric Component"},{"location":"tech_docs/land/","text":"Land Component \u00b6","title":"Land Component"},{"location":"tech_docs/land/#land-component","text":"","title":"Land Component"},{"location":"tech_docs/ocn/","text":"Ocean Component \u00b6","title":"Ocean Component"},{"location":"tech_docs/ocn/#ocean-component","text":"","title":"Ocean Component"},{"location":"tech_docs/seaIce/","text":"Sea Ice Component \u00b6","title":"Sea Ice Component"},{"location":"tech_docs/seaIce/#sea-ice-component","text":"","title":"Sea Ice Component"},{"location":"tech_docs/partial/computation/","text":"Technical and Computational Procedures \u00b6","title":"Computation"},{"location":"tech_docs/partial/computation/#technical-and-computational-procedures","text":"","title":"Technical and Computational Procedures"},{"location":"tech_docs/partial/dynamics/","text":"Dynamics and Numerical Procedures \u00b6","title":"Dynamics"},{"location":"tech_docs/partial/dynamics/#dynamics-and-numerical-procedures","text":"","title":"Dynamics and Numerical Procedures"},{"location":"tech_docs/partial/physics/","text":"Physical processes and parameterizations \u00b6","title":"Physics"},{"location":"tech_docs/partial/physics/#physical-processes-and-parameterizations","text":"","title":"Physical processes and parameterizations"},{"location":"user_guide/","text":"User Guide \u00b6 The user guide provides an overview of IITM-ESM and the details of model setup, pre-and-post processing and model runs. Introduction \u00b6 Model Directory Tree \u00b6 Input Datasets \u00b6","title":"User Guide"},{"location":"user_guide/#user-guide","text":"The user guide provides an overview of IITM-ESM and the details of model setup, pre-and-post processing and model runs.","title":"User Guide"},{"location":"user_guide/#introduction","text":"","title":"Introduction"},{"location":"user_guide/#model-directory-tree","text":"","title":"Model Directory Tree"},{"location":"user_guide/#input-datasets","text":"","title":"Input Datasets"}]}